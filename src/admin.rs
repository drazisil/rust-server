// This file is part of the Oxide project, licensed under GPL-3.0-or-later.
// See the COPYING.md file in the project root for more information.

use actix_web::{web, HttpResponse, Responder};
use serde::Deserialize;
use crate::database::{get_all_shards, insert_shard, ShardListEntry};

#[derive(Deserialize)]
struct ShardInput {
    name: String,
    description: String,
    login_server_ip: String,
    login_server_port: u16,
    lobby_server_ip: String,
    lobby_server_port: u16,
    mcots_server_ip: String,
    server_group_name: String,
    population: u32,
    max_personas_per_user: u8,
    diagnostic_server_host: String,
    diagnostic_server_port: u16,
}

async fn get_shards() -> impl Responder {
    match get_all_shards().await {
        Ok(shards) => HttpResponse::Ok().json(shards),
        Err(err) => {
            eprintln!("Database query failed: {}", err);
            HttpResponse::InternalServerError().finish()
        }
    }
}

async fn add_shard(shard: web::Json<ShardInput>) -> impl Responder {
    let shard_entry = ShardListEntry {
        id: 0, // Assuming ID is auto-generated by the database
        name: shard.name.clone(),
        description: shard.description.clone(),
        login_server_ip: shard.login_server_ip.clone(),
        login_server_port: shard.login_server_port as i32,
        lobby_server_ip: shard.lobby_server_ip.clone(),
        lobby_server_port: shard.lobby_server_port as i32,
        mcots_server_ip: shard.mcots_server_ip.clone(),
        server_group_name: shard.server_group_name.clone(),
        population: shard.population as i32,
        max_personas_per_user: shard.max_personas_per_user as i32,
        diagnostic_server_host: shard.diagnostic_server_host.clone(),
        diagnostic_server_port: shard.diagnostic_server_port as i32,
        status: serde_json::json!({}), // Default status
    };

    match insert_shard(shard_entry).await {
        Ok(_) => HttpResponse::Ok().finish(),
        Err(err) => {
            eprintln!("Failed to insert shard: {}", err);
            HttpResponse::InternalServerError().finish()
        }
    }
}

pub fn admin_routes(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/admin")
            .route("/shards", web::get().to(get_shards))
            .route("/shards", web::post().to(add_shard))
    );
}
